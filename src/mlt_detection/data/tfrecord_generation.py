"""
Transform ResNet23 data into tf record.
"""

import argparse
from pathlib import Path
import numpy as np
import cv2
import tensorflow as tf
from src.utils.bbox_utils import point_to_box


def record_from_resnet_data(inp, out=None, ignore=None):
    inp = Path(inp)
    if out is None:
        out = str(inp/"resnet_data.tfrecord")

    print(f"Collecting data. Ignoring: {ignore} ...")
    coord_path = [x for x in inp.rglob("coordinates.npy") if len(set(ignore).intersection(set(x.parts))) < 1]
    img_path = [x for x in inp.rglob("image.tif") if len(set(ignore).intersection(set(x.parts))) < 1]

    coords = [np.load(c) for c in coord_path]
    bboxes = [np.array([point_to_box(p, 40) for p in points]) for points in coords]

    print(f"Writing record ...")
    write_tf_record(img_path, bboxes, out)
    print("FINISHED")


def write_tf_record(images, bboxes, filename):
    """
    Write tf record to filename.

    :param images: List of image paths
    :param bboxes: List of bboxes in format (xmin, ymin, xmax, ymax)
    :param filename: Name of tf record file
    :return: None
    """

    with tf.io.TFRecordWriter(filename) as writer:

        for i, (image_path, bbox) in enumerate(zip(images, bboxes)):
            image = cv2.imread(str(image_path), cv2.IMREAD_UNCHANGED)
            tf_example = bbox_to_tf_example(image, image_path, bbox)
            writer.write(tf_example.SerializeToString())
    print("Created tf-record file in: \n", filename)


def bbox_to_tf_example(image, filename, bboxes):

    # Parse image metas
    height, width, *_ = image.shape
    image_ext = ".png"
    filename = str(filename)

    encoded_image = cv2.imencode(image_ext, image)[1].tostring()

    # Parse bounding boxes
    xmins, xmaxs, ymins, ymaxs = [], [], [], []

    for bbox in bboxes:
        x_min, y_min, x_max, y_max = bbox
        xmins.append(x_min / width)
        xmaxs.append(x_max / width)
        ymins.append(y_min / height)
        ymaxs.append(y_max / height)

    classes_text = [b'Cell' for _ in bboxes]
    classes = [1]

    tf_example = tf.train.Example(features=tf.train.Features(feature={
        'image/height': int64_feature(height),
        'image/width': int64_feature(width),
        'image/filename': bytes_feature(filename.encode("unicode_escape")),
        'image/source_id': bytes_feature(filename.encode("unicode_escape")),
        'image/encoded': bytes_feature(encoded_image),
        'image/format': bytes_feature(image_ext.encode("unicode_escape")),
        'image/object/bbox/xmin': float_list_feature(xmins),
        'image/object/bbox/xmax': float_list_feature(xmaxs),
        'image/object/bbox/ymin': float_list_feature(ymins),
        'image/object/bbox/ymax': float_list_feature(ymaxs),
        'image/object/class/text': bytes_list_feature(classes_text),
        'image/object/class/label': int64_list_feature(classes),
    }))
    return tf_example


def int64_feature(value):
    return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))


def int64_list_feature(value):
    return tf.train.Feature(int64_list=tf.train.Int64List(value=value))


def bytes_feature(value):
    return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))


def bytes_list_feature(value):
    return tf.train.Feature(bytes_list=tf.train.BytesList(value=value))


def float_list_feature(value):
    return tf.train.Feature(float_list=tf.train.FloatList(value=value))


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--input", required=True, help="Input folder as generated by data_preparation.py")
    parser.add_argument("-o", "--output", help="Complete path to output record file. DEFAULT: input folder")
    parser.add_argument("--ignore", nargs="*", help="Ignore all annotations found containing any pattern provided."
                                                    "e.g. --ignore nrk_experiment a549_experiment")
    args = parser.parse_args()

    record_from_resnet_data(args.input, args.output, args.ignore)
